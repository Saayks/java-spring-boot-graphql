type Utilisateur {
    id: ID!
    nom: String!
    prenom: String!
    email: String!
    role: String!
}

type Commande {
    idCommande: ID!
    userId: ID!
    articles: [ArticleMap]!
    coutTot: Float!
    type: String!
    idBoutique: Int!
    status: String!
}

type Boutique {
    idBoutique: ID!
    adresse: String!
    userId: ID!
    stock: [StockBoutique]!
}

type Production {
    idProduction: ID!
    idArticle: ID!
    quantite: Int!
}

type Article {
    idArticle: ID!
    nom: String!
    prix: Float!
    stock: Int!
    stockPrev: Int!
}

type StockBoutique {
    idBoutique: ID!
    idArticle: ID!
    quantite: Int!
}

type ArticleMap {
    idArticle: ID!
    quantite: Int!
}

type Query {
    getAllUsers: [Utilisateur]!
    getUserById(id: ID!): Utilisateur
    getUserByEmail(email: String!): Utilisateur
    getAllCommandes: [Commande]!
    getAllCommandesById(idUtilisateur: ID!): [Commande]!
    getAllBoutiques: [Boutique]!
    getAllProduction: [Production]!
    getArticles: [Article]!
    getArticleById(idArticle: ID!): Article
    getStockBoutiqueById(idBoutique: ID!): StockBoutique
}

type Mutation {
    createUser(nom: String!, prenom: String!, email: String!): Utilisateur
    updateStock(idArticle: ID!, stock: Int!): Boolean
    updateStockPrev(idArticle: ID!, stock: Int!): Article
    updateStockById(articleId: ID!, newStock: Int!): Article
    updateStockPrevById(articleId: ID!, newStockPrev: Int!): Article
    deleteCommande(commandeId: ID!): Boolean
    updateCommande(commandeId: ID!, newStatus: String!): Commande
}